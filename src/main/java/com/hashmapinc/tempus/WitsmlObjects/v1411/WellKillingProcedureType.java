//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.06.26 at 03:00:38 PM CDT 
//


package com.hashmapinc.tempus.WitsmlObjects.v1411;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for WellKillingProcedureType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre> {@code
 * <simpleType name="WellKillingProcedureType">
 *   <restriction base="{http://www.witsml.org/schemas/1series}abstractTypeEnum">
 *     <enumeration value="drillers method"/>
 *     <enumeration value="wait and weight"/>
 *     <enumeration value="bullheading"/>
 *     <enumeration value="lubricate and bleed"/>
 *     <enumeration value="forward circulation"/>
 *     <enumeration value="reverse circulation"/>
 *     <enumeration value="unknown"/>
 *   </restriction>
 * </simpleType>
 * } </pre>
 * 
 */
@XmlType(name = "WellKillingProcedureType")
@XmlEnum
public enum WellKillingProcedureType {


    /**
     * A well killing procedure that is presecribing circulation the 
     * 					kick fluids out of the well and then circulating a higher density kill mud through 
     * 					the kill line into the well through an adjustable choke. 
     * 
     */
    @XmlEnumValue("drillers method")
    DRILLERS_METHOD("drillers method"),

    /**
     * A well killing procedure that is presecribing circulating heavier 
     * 					kill mud while a constant downhole pressure is maintained by pressure relief through 
     * 					a choke. 
     * 
     */
    @XmlEnumValue("wait and weight")
    WAIT_AND_WEIGHT("wait and weight"),

    /**
     * A well killing procedure that is prescribing pumping of kill 
     * 					weight fluid down the tubing and forcing the wellbore fluids back into the formation 
     * 					through the perforations.
     * 
     */
    @XmlEnumValue("bullheading")
    BULLHEADING("bullheading"),

    /**
     * A well killing procedure that is prescribing to pump a volume of 
     * 					killing fluid corresponding to half the volume of the well tubing into the well, 
     * 					observing the well for 30 - 60 minutes and wait for the tubing head pressure to 
     * 					drop, then pump additional killing fluid into the well and when the wellhead 
     * 					pressure does not exceed 200 psi above observed tubing head pressure bleed off 
     * 					gas from the tubing at high rate.
     * 
     */
    @XmlEnumValue("lubricate and bleed")
    LUBRICATE_AND_BLEED("lubricate and bleed"),

    /**
     * A well killing procedure that is prescribing a drilling fluid 
     * 					circulation down the tubing, through a circulation device (or out the end of a 
     * 					work string/coiled tubing) and up the annulus.
     * 
     */
    @XmlEnumValue("forward circulation")
    FORWARD_CIRCULATION("forward circulation"),

    /**
     * A well killing procedure that is prescribing a drilling fluid 
     * 					circulation down the completion annulus, workstring annulus or pipe annulus and 
     * 					taking returns up the tubing, workstring or pipe.
     * 
     */
    @XmlEnumValue("reverse circulation")
    REVERSE_CIRCULATION("reverse circulation"),

    /**
     * The value is not known. This value should not be used
     * 					in normal situations. All reasonable attempts should be made to determine
     * 					the appropriate value. Use of this value may result in rejection in some situations.
     * 
     */
    @XmlEnumValue("unknown")
    UNKNOWN("unknown");
    private final String value;

    WellKillingProcedureType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static WellKillingProcedureType fromValue(String v) {
        for (WellKillingProcedureType c: WellKillingProcedureType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
