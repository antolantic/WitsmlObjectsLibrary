//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.06.26 at 03:00:38 PM CDT 
//


package com.hashmapinc.tempus.WitsmlObjects.v1411;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for StandardVolumeUom.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre> {@code
 * <simpleType name="StandardVolumeUom">
 *   <restriction base="{http://www.witsml.org/schemas/1series}abstractUomEnum">
 *     <enumeration value="scm(15C)"/>
 *     <enumeration value="scm(0C)"/>
 *     <enumeration value="Gsm3"/>
 *     <enumeration value="ksm3"/>
 *     <enumeration value="MMscf(60F)"/>
 *     <enumeration value="MMscm(15C)"/>
 *     <enumeration value="MMstb(60F)"/>
 *     <enumeration value="Mscf(60F)"/>
 *     <enumeration value="Mstb(60F)"/>
 *     <enumeration value="scf(60F)"/>
 *     <enumeration value="stb(60F)"/>
 *   </restriction>
 * </simpleType>
 * } </pre>
 * 
 */
@XmlType(name = "StandardVolumeUom")
@XmlEnum
public enum StandardVolumeUom {

    @XmlEnumValue("scm(15C)")
    SCM_15_C("scm(15C)"),
    @XmlEnumValue("scm(0C)")
    SCM_0_C("scm(0C)"),
    @XmlEnumValue("Gsm3")
    GSM_3("Gsm3"),
    @XmlEnumValue("ksm3")
    KSM_3("ksm3"),
    @XmlEnumValue("MMscf(60F)")
    M_MSCF_60_F("MMscf(60F)"),
    @XmlEnumValue("MMscm(15C)")
    M_MSCM_15_C("MMscm(15C)"),
    @XmlEnumValue("MMstb(60F)")
    M_MSTB_60_F("MMstb(60F)"),
    @XmlEnumValue("Mscf(60F)")
    MSCF_60_F("Mscf(60F)"),
    @XmlEnumValue("Mstb(60F)")
    MSTB_60_F("Mstb(60F)"),
    @XmlEnumValue("scf(60F)")
    SCF_60_F("scf(60F)"),
    @XmlEnumValue("stb(60F)")
    STB_60_F("stb(60F)");
    private final String value;

    StandardVolumeUom(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StandardVolumeUom fromValue(String v) {
        for (StandardVolumeUom c: StandardVolumeUom.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
