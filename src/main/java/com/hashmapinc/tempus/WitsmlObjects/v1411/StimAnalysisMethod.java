//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.06.26 at 03:00:38 PM CDT 
//


package com.hashmapinc.tempus.WitsmlObjects.v1411;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for StimAnalysisMethod.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre> {@code
 * <simpleType name="StimAnalysisMethod">
 *   <restriction base="{http://www.witsml.org/schemas/1series}abstractTypeEnum">
 *     <enumeration value="average"/>
 *     <enumeration value="delta pressure over g-time"/>
 *     <enumeration value="delta pressure over linear time"/>
 *     <enumeration value="delta pressure over radial time"/>
 *     <enumeration value="gdk 2-d"/>
 *     <enumeration value="horner"/>
 *     <enumeration value="linear"/>
 *     <enumeration value="log-log"/>
 *     <enumeration value="nolte"/>
 *     <enumeration value="pdl coefficient"/>
 *     <enumeration value="perkins and kern 2-d"/>
 *     <enumeration value="radial 2-d"/>
 *     <enumeration value="square root"/>
 *     <enumeration value="third-party software"/>
 *     <enumeration value="other"/>
 *     <enumeration value="unknown"/>
 *   </restriction>
 * </simpleType>
 * } </pre>
 * 
 */
@XmlType(name = "StimAnalysisMethod")
@XmlEnum
public enum StimAnalysisMethod {


    /**
     * Refers to the numeric average of the investigated 
     * 					variable of interest. In this case a diagnostic variable is produced 
     * 					by various methods and averaged to facilitate a diagnostic decision.
     * 					
     * 
     */
    @XmlEnumValue("average")
    AVERAGE("average"),

    /**
     * A diagnostic plot of the change in pressure over the 
     * 					G-Time function to determine the pressure and time at which a fracture closed.
     * 					
     * 
     */
    @XmlEnumValue("delta pressure over g-time")
    DELTA_PRESSURE_OVER_G_TIME("delta pressure over g-time"),

    /**
     * 
     * 					An after closure analysis plot of the change in pressure over a 
     * 					linear flow time function to help derive reservoir pressure.
     * 					
     * 
     */
    @XmlEnumValue("delta pressure over linear time")
    DELTA_PRESSURE_OVER_LINEAR_TIME("delta pressure over linear time"),

    /**
     * 
     * 					An after closure analysis plot of the change in pressure 
     * 					over a radial flow time function to help derive reservoir 
     * 					pressure and permeability
     * 					
     * 
     */
    @XmlEnumValue("delta pressure over radial time")
    DELTA_PRESSURE_OVER_RADIAL_TIME("delta pressure over radial time"),

    /**
     * 
     * 					A before closure analysis permeability estimate 
     * 					using the GdK 2-D fracture geometry as a model for leakoff
     * 					
     * 
     */
    @XmlEnumValue("gdk 2-d")
    GDK_2_D("gdk 2-d"),

    /**
     * 
     * 					A plot of bottomhole pressure over the log of a time ratio 
     * 					(Horner Time) to provide a first estimate of closure pressure 
     * 					and an extrapolated reservoir pressure. The Horner plot is used 
     * 					to determine if pseudo-radial flow developed during pressure decline. 
     * 					If a semi-log straight line is observed and the line can be extrapolated 
     * 					to a reasonable value of reservoir pressure, radial or pseudo-radial flow 
     * 					may be affecting the decline behavior. This suggests that the fracture 
     * 					is already closed and that data beyond the point of influence need not be 
     * 					considered in the evaluation of closure. The Horner plot provides a lower bound, 
     * 					first estimate of closure pressure.
     * 					
     * 
     */
    @XmlEnumValue("horner")
    HORNER("horner"),

    /**
     * 
     * 					A diagnostic plot of the change in pressure over the change in time 
     * 					to determine the pressure and time at which a fracture closed.
     * 					
     * 
     */
    @XmlEnumValue("linear")
    LINEAR("linear"),

    /**
     * 
     * 					A diagnostic plot of the log of the change in pressure over the log 
     * 					of the change in time to determine the pressure and time at which a fracture closed.
     * 					
     * 
     */
    @XmlEnumValue("log-log")
    LOG_LOG("log-log"),

    /**
     * 
     * 					Nolte analysis diagnostic derivative method is one of the methodologies 
     * 					for determining inflection points (i.e. fracture closure). Analyzing the 
     * 					derivative, dP/dt, as a function of time is a method of determining closure. 
     * 					The resulting trend represents the rate-of-change of pressure with respect to time.
     * 					Depending on the type of data (i.e., flowback or natural decline), the derivative 
     * 					plot can be used to identify the closure by observing a characteristic change in 
     * 					the shape of this relationship. It accounts for mass conservation and fracture 
     * 					compliance and inherently assumes that the rate of pressure decline is proportional 
     * 					to the leakoff rate. Nolte was the first to implement this concept. In simple terms, 
     * 					if one can find a time function where the rate of pressure decline with respect to 
     * 					a time function is a constant during fracture closure, the closure time would be 
     * 					indicated by a deviation from the measured and theoretical pressure declines.
     * 					
     * 
     */
    @XmlEnumValue("nolte")
    NOLTE("nolte"),

    /**
     * 
     * 					Pressure Dependent Leakoff Coefficient which accounts for non-classical leakoff 
     * 					or leakoff that changes as pressure changes.
     * 					
     * 
     */
    @XmlEnumValue("pdl coefficient")
    PDL_COEFFICIENT("pdl coefficient"),

    /**
     * 
     * 					A before closure analysis permeability estimate using the Perkins and 
     * 					Kern 2-D fracture geometry as a model for leakoff
     * 					
     * 
     */
    @XmlEnumValue("perkins and kern 2-d")
    PERKINS_AND_KERN_2_D("perkins and kern 2-d"),

    /**
     * 
     * 					A before closure analysis permeability estimate using the Radial 2-D 
     * 					fracture geometry as a model for leakoff
     * 					
     * 
     */
    @XmlEnumValue("radial 2-d")
    RADIAL_2_D("radial 2-d"),

    /**
     * 
     * 					A diagnostic plot of the change in pressure over the square root of the 
     * 					change in time to determine the pressure and time at which a fracture closed.
     * 					
     * 
     */
    @XmlEnumValue("square root")
    SQUARE_ROOT("square root"),

    /**
     * 
     * 					Real-time fracture geometry simulation using third-party software.
     * 					
     * 
     */
    @XmlEnumValue("third-party software")
    THIRD_PARTY_SOFTWARE("third-party software"),

    /**
     * A known method not one of the above.
     * 					
     * 
     */
    @XmlEnumValue("other")
    OTHER("other"),

    /**
     * Unknown
     * 
     */
    @XmlEnumValue("unknown")
    UNKNOWN("unknown");
    private final String value;

    StimAnalysisMethod(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StimAnalysisMethod fromValue(String v) {
        for (StimAnalysisMethod c: StimAnalysisMethod.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
